---
format:
  pdf:
    pdf-engine: xelatex
    toc: false
    number-sections: false
    geometry: margin=1in
    csl: vancouver.csl
    nocite: "@*"
    linestretch: 1.1
    header-includes:
      - \usepackage{hyperref}
      - \usepackage{titling}
      - \pretitle{}\posttitle{}\predate{}\postdate{}
execute:
  echo: false
---

\begin{center}
{\Huge \textbf{Nicholas C. Borcherding, M.D., Ph.D.}}\par\vspace{0.35em}
Assistant Professor\\
Department of Pathology and Immunology\\
Washington University in St. Louis\\
\texttt{borcherding.n@wustl.edu} | \url{https://www.borch.dev/} \\
{\small Compiled on `r format(Sys.Date(), "%B %d, %Y")`}\\
\par\vspace{0.4em}
\end{center}

```{r}
#| include: false
# Global chunk defaults
knitr::opts_chunk$set(
  echo    = FALSE,
  message = FALSE,
  warning = FALSE,
  results = "asis",
  comment = NA
)

suppressPackageStartupMessages({
  library(yaml)
  library(glue)
  library(purrr)
  library(dplyr)
  library(stringr)
  library(RefManageR)
})

# Load YAML (expects 'cv.yaml' in the working directory)
cv <- yaml::read_yaml("data/cv.yml")

# ---------- Helpers ----------
nz <- function(x, alt = "") if (is.null(x) || identical(x, "") || (length(x)==1 && is.na(x))) alt else x
pr <- function(x) paste(x, collapse = "")  # tiny print helper

fmt_range <- function(start, end) {
  s <- nz(start, "")
  e <- if (is.null(end) || end == "" || tolower(end) == "present") "Present" else end
  if (nchar(s) && nchar(e)) glue("{s}–{e}") else nz(s, e)
}

embolden_me <- function(x) {
  if (is.null(x)) return("")

  # If they handed us an abstract record, use its authors field
  if (is.list(x) && !is.null(x$authors)) x <- x$authors

  # If still a list, drop non-character-ish entries and collapse
  if (is.list(x)) {
    x <- unlist(x, use.names = FALSE)
  }
  # Keep only atomic, non-language, non-function bits
  keep <- vapply(x, function(z) {
    is.atomic(z) && !is.language(z) && !is.symbol(z) && !is.expression(z) && !is.function(z)
  }, logical(1L))
  x <- x[keep]
  x <- paste(as.character(x), collapse = ", ")

  patterns <- c(
    "Borcherding,?\\s*N\\.?\\s*C?\\.?",
    "Borcherding,?\\s*Nicholas\\s*C?\\.?",
    "N\\.?\\s*C?\\.?\\s*Borcherding",
    "Nicholas\\s*C?\\.?\\s*Borcherding"
  )

  for (p in patterns) {
    m <- gregexpr(p, x, perl = TRUE, ignore.case = TRUE)
    regmatches(x, m) <- lapply(regmatches(x, m), function(hits) {
      ifelse(hits == "", hits, paste0("**", hits, "**"))
    })
  }
  x
}


.scalarize <- function(x) {
  if (is.null(x)) return("")
  if (is.list(x)) x <- unlist(x, use.names = FALSE, recursive = TRUE)
  x <- as.character(x)
  x <- x[!is.na(x) & nzchar(trimws(x))]
  if (!length(x)) return("")
  paste(x, collapse = " ")
}

fix_markup <- function(x) {
  x <- .scalarize(x)
  x <- str_replace_all(x, regex("<\\s*i\\s*>(.*?)<\\s*/\\s*i\\s*>",  ignore_case = TRUE), "*\\1*")
  x <- str_replace_all(x, regex("<\\s*sub\\s*>(.*?)<\\s*/\\s*sub\\s*>", ignore_case = TRUE), "_{\\1}")
  x <- str_replace_all(x, regex("<\\s*sup\\s*>(.*?)<\\s*/\\s*sup\\s*>", ignore_case = TRUE), "^{\\1}")
  x <- str_replace_all(x, "\\\\alpha", "α")
  x <- str_replace_all(x, "\\\\beta",  "β")
  x <- str_replace_all(x, "\\\\gamma", "γ")
  x <- str_replace_all(x, "\\\\kappa", "κ")
  x <- str_replace_all(x, regex("(?<![A-Za-z])alpha(?![A-Za-z])"), "α")
  x <- str_replace_all(x, regex("(?<![A-Za-z])beta(?![A-Za-z])"),  "β")
  x <- str_replace_all(x, regex("(?<![A-Za-z])gamma(?![A-Za-z])"), "γ")
  x <- str_replace_all(x, regex("(?<![A-Za-z])kappa(?![A-Za-z])"), "κ")
  x <- str_replace_all(x, "&alpha;", "α")
  x <- str_replace_all(x, "&beta;",  "β")
  x <- str_replace_all(x, "&gamma;", "γ")
  x <- str_replace_all(x, "&kappa;", "κ")
  # HLA alleles: DRB1*15:01 -> DRB1\*15:01
  x <- str_replace_all(x, "(\\b[[:upper:]][[:upper:][:digit:]-]*)\\*", "\\1\\\\*")
  x
}

bold_author <- function(x) {
  x <- .scalarize(x)
  x <- str_replace_all(x, fixed("**"), "\uF000\uF000")   # protect existing bold
  pats <- c(
    "\\bBorcherding,\\s*N[\\s\\.]*(?:C)?\\.?\\b",
    "\\bBorcherding\\s+N[\\s\\.]*(?:C)?\\.?\\b",
    "\\bNicholas\\s*C?\\.?\\s+Borcherding\\b",
    "\\bN[\\s\\.]*(?:C)?\\.?\\s+Borcherding\\b"
  )
  for (p in pats) x <- str_replace_all(x, regex(p, ignore_case = TRUE), "**\\0**")
  str_replace_all(x, "\uF000\uF000", "**")
}

fmt_entry <- function(s) s |> .scalarize() |> fix_markup() |> bold_author()

# ---- Bib formatting helpers ----
initials <- function(given_vec) {
  # given_vec is a character vector of given names; collapse to initials without dots (N C -> NC)
  if (length(given_vec) == 0) return("")
  paste0(str_replace_all(substr(given_vec, 1, 1), "[^A-Za-z]", ""), collapse = "")
}

format_authors_vancouver <- function(persons) {
  # persons is a list of 'person' objects (utils::person)
  if (is.null(persons) || length(persons) == 0) return("")
  names <- map_chr(persons, function(p) {
    fam <- .scalarize(p$family)
    giv <- initials(unlist(p$given, use.names = FALSE))
    paste0(fam, " ", giv)
  })
  paste(names, collapse = ", ")
  
}

fmt_pages <- function(pages) {
  if (is.null(pages) || !nzchar(pages)) return("")
  # Compress page ranges like 1234-1240 -> 1234–40 (optional)
  str_replace(pages, "^(\\d+)-(\\d*)(\\d{2})$", "\\1–\\3")
}

format_bibentry_vancouver <- function(be) {
  # be is a single RefManageR::BibEntry
  type <- tolower(be$bibtype %||% "")
  au   <- format_authors_vancouver(be$author)
  yr   <- be$year %||% be$date %||% ""
  ti   <- be$title %||% ""
  ti <- str_trim(ti)
  ti <- str_remove(ti, "[[:punct:]]+$")
  jr   <- be$journal %||% be$journaltitle %||% be$booktitle %||% ""
  vol  <- be$volume %||% ""
  iss  <- be$number %||% be$issue %||% ""
  pg   <- fmt_pages(be$pages %||% "")
  doi  <- be$doi %||% ""

  # Title: leave plain; italics will be preserved if present via fix_markup (e.g., <i>…</i>)
  # Journal often italicized in Vancouver; we'll leave plain and let CSL/TeX handle if desired
  core <- paste0(au, ". ", ti, ". ", jr, ". ", yr)
  # add volume/issue/pages if present
  if (nzchar(vol)) core <- paste0(core, ";", vol)
  if (nzchar(iss)) core <- paste0(core, "(", iss, ")")
  if (nzchar(pg))  core <- paste0(core, ":", pg)
  core <- paste0(core, ".")
  if (nzchar(doi)) core <- paste0(core, " doi:", doi)

  fmt_entry(core)
}

```

## Positions
```{r}
pos <- cv$positions %||% list()
if (length(pos)) {
  cat(map_chr(pos, ~ glue("- **{.x$title}**, {.x$org} ({fmt_range(.x$start, .x$end)}) — {.x$location}")), sep = "\n")
} else {
  cat("_(none listed)_")
}
```

## Education & Training

### Education
```{r}
edu <- cv$education %||% list()
if (length(edu)) {
  cat(purrr::map_chr(edu, ~ glue::glue("- {.x$degree}, {.x$org}, {.x$year}")), sep = "\n")
} else {
  cat("_(none listed)_")
}
```

### Postgraduate Training
```{r}
trn <- cv$training %||% list()
if (length(trn)) {
  cat(purrr::map_chr(trn, ~ glue::glue("- {.x$title}, {.x$org} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
} else {
  cat("_(none listed)_")
}
```

## Professional Licensure
```{r}
lic <- cv$licensures %||% list()
if (length(lic)) {
  cat(map_chr(lic, ~ glue("- {nz(.x$year_start)}: {nz(.x$license)}{ifelse(!is.null(.x$state), glue(', {.x$state}'), '')}{ifelse(!is.null(.x$number), glue(', #{.x$number}'), '')}{ifelse(!is.null(.x$status), glue(' ({.x$status})'), '')}")), sep = "\n")
} else cat("_(none listed)_")
```

## Military Experience
```{r}
mil <- cv$military %||% list()
if (length(mil)) {
  cat(map_chr(mil, ~ glue("- {.x$branch}, {.x$rank} ({fmt_range(.x$start, .x$end)}), {.x$status}")), sep = "\n")
} else cat("_(none listed)_")
```

## Consulting & Advisory
```{r}
con <- cv$consulting %||% list()
if (length(con)) {
  cat(map_chr(con, ~ glue("- **{.x$role}**, {.x$org} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
} else cat("_(none listed)_")
```

## Editorial & Peer Review

### Editorial/Review Boards
```{r}
ed <- cv$editorial %||% list()
if (!is.null(ed$review_board) && length(ed$review_board)) {
  cat(map_chr(ed$review_board, ~ glue("{.x$journal} ({.x$year})")), sep = ", ")
} else {
  cat("_(none listed)_")
}
```

### Guest Editor
```{r}
if (!is.null(ed$guest_editor) && length(ed$guest_editor)) {
  cat(map_chr(ed$guest_editor, ~ glue("{.x$journal} ({.x$year})")), sep = ", ")
} else {
  cat("_(none listed)_")
}
```

### Ad Hoc Reviews
```{r}
ahr <- cv$editorial$ad_hoc_reviews %||% list()
if (length(ahr)) {
  cat(paste(ahr, collapse = ", "))
} else {
  cat("_(none listed)_")
}
```

## Service & Committees

### Institutional
```{r}
srv <- cv$service %||% list()
if (!is.null(srv$institutional) && length(srv$institutional)) {
  cat(purrr::map_chr(srv$institutional, ~ glue::glue("- {.x$committee} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
} else {
  cat("_(none listed)_")
}
```

### National
```{r}
if (!is.null(srv$national) && length(srv$national)) {
  cat(purrr::map_chr(srv$national, ~ glue::glue("- {.x$committee} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
} else {
  cat("_(none listed)_")
}
```

## Mentorship

### Research Mentorship
```{r}
mnt <- cv$mentorship %||% list()
if (!is.null(mnt$research) && length(mnt$research)) {
  cat(purrr::map_chr(mnt$research, ~ glue::glue("- {.x$mentee}, {.x$level}, {fmt_range(.x$start, 'Present')}: {.x$topic}")), sep = "\n")
} else {
  cat("_(none listed)_")
}
```

### Career Development
```{r}
if (!is.null(mnt$career) && length(mnt$career)) {
  cat(purrr::map_chr(mnt$career, ~ glue::glue("- {.x$mentee}, {.x$level}, {fmt_range(.x$start, 'Present')}: {.x$topic}")), sep = "\n")
} else {
  cat("_(none listed)_")
}
```

## Awards & Honors
```{r}
awd <- cv$awards %||% list()
if (length(awd)) {
  cat(map_chr(awd, ~ glue("- **{.x$year}:** {.x$name}")), sep = "\n")
} else cat("_(none listed)_")
```

## Professional Memberships
```{r}
mbr <- cv$memberships %||% list()
if (length(mbr)) {
  cat(map_chr(mbr, ~ glue("- {.x$org} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
} else cat("_(none listed)_")
```

## Software
```{r}
sft <- cv$software %||% list()
if (length(sft)) {
  cat(map_chr(sft, ~ glue("- **[{.x$name}]({.x$link})** ({.x$year}) — {.x$role}. {.x$description}")), sep = "\n")
} else cat("_(none listed)_")
```

## Research Funding

### Institutional
```{r}
rf <- cv$research_funding %||% list()
inst <- rf$institutional %||% list()
if (length(inst) && is.list(inst)) {
  cat(
    purrr::map_chr(
      inst,
      ~ glue::glue("- {.x$years}: *{.x$title}* — {.x$sponsor}. Role: **{.x$role}**")
    ),
    sep = "\n"
  )
} else {
  cat("_(none listed)_")
}
```

### National
```{r}
nat <- rf$national %||% list()
if (length(nat) && is.list(nat)) {
  cat(
    purrr::map_chr(
      nat,
      ~ glue::glue("- {.x$years}: *{.x$title}* — {.x$sponsor}. Role: **{.x$role}**")
    ),
    sep = "\n"
  )
} else {
  cat("_(none listed)_")
}
```

## Invited Presentations

### Institutional
```{r}
pres <- cv$presentations %||% list()
ipi <- pres$invited$institutional %||% list()
if (length(ipi)) {
  cat(map_chr(ipi, ~ glue("- {.x$year}: *{.x$title}*. {.x$venue}")), sep = "\n")
} else cat("_(none listed)_")
```

### National
```{r}
ipn <- pres$invited$national %||% list()
if (length(ipn)) {
  cat(map_chr(ipn, ~ glue("- {.x$year}: *{.x$title}*. {.x$venue}")), sep = "\n")
} else cat("_(none listed)_")
```

## Conference Abstracts
```{r, results='asis'}
abs <- cv$presentations$abstracts %||% list()

if (length(abs)) {
  out <- map_chr(abs, fmt_entry)   # each element now guaranteed length 1
  cat(paste0("- ", out), sep = "\n")
} else {
  cat("_(none listed)_")
}
```

## Publications
```{r}
pubs <- cv$selected_publications_bib

if (length(pubs)) {
  if (length(pubs) == 1 && grepl("\\.bib$", pubs, ignore.case = TRUE)) {
    # Case A: they gave us a path to a .bib file; print ALL entries (or select via keys)
    bib <- ReadBib(pubs, check = FALSE)
    # Optional: choose a subset using keys if you have them
    # keys <- c("PMID35402439","PMID35361907", ...)  # define if desired
    # if (length(keys)) bib <- bib[keys]

    items <- map_chr(as.list(bib), format_bibentry_vancouver)
  } else if (is.character(pubs) && all(grepl("^@\\w+\\{", pubs))) {
    # Case B: user passed raw BibTeX entries as strings
    tmp <- tempfile(fileext = ".bib")
    writeLines(pubs, tmp)
    bib <- ReadBib(tmp, check = FALSE)
    items <- map_chr(as.list(bib), format_bibentry_vancouver)
  } else if (is.list(pubs) || is.vector(pubs)) {
    # Case C: already formatted strings or lists; just pass through fmt_entry
    items <- map_chr(pubs, fmt_entry)
  } else {
    items <- character(0)
  }

  if (length(items)) {
    cat(paste0(seq_along(items), ". ", items), sep = "\n")
  } else {
    cat("_(none listed)_")
  }
} else {
  cat("_(none listed)_")
}
```
