---
title: "Curriculum Vitae — Nicholas C. Borcherding"
author: "Nicholas C. Borcherding, MD PhD"
format:
  pdf:
    pdf-engine: xelatex
    cite-method: citeproc
    number-sections: false
    toc: false
    geometry: margin=1in
    linestretch: 1.1
  html:
    theme: cosmo
    toc: true
filters:
  - bold-author.lua
bibliography: "data/pubs.bib"
nocite: "@*"
link-citations: true
execute:
  echo: false
---

```{r}
# Global chunk defaults
knitr::opts_chunk$set(
  echo    = FALSE,
  message = FALSE,
  warning = FALSE,
  results = "asis",
  comment = NA
)

suppressPackageStartupMessages({
  library(yaml)
  library(glue)
  library(purrr)
  library(dplyr)
  library(stringr)
})

# Load YAML (expects 'cv.yaml' in the working directory)
cv <- yaml::read_yaml("data/cv.yml")

# ---------- Helpers ----------
nz <- function(x, alt = "") if (is.null(x) || identical(x, "") || (length(x)==1 && is.na(x))) alt else x
pr <- function(x) paste(x, collapse = "")  # tiny print helper

fmt_range <- function(start, end) {
  s <- nz(start, "")
  e <- if (is.null(end) || end == "" || tolower(end) == "present") "Present" else end
  if (nchar(s) && nchar(e)) glue("{s}–{e}") else nz(s, e)
}

embolden_me <- function(x) {
  if (is.null(x)) return("")
  # Flatten lists safely
  if (is.list(x)) x <- paste(unlist(x, use.names = FALSE), collapse = ", ")
  # Guard against functions and expressions
  if (is.function(x) || is.language(x) || is.symbol(x) || is.expression(x)) return("")
  x <- as.character(x)

  # Regex patterns to catch common author formats
  me_rx <- paste0(
    "(?i)",
    "\\bNicholas\\s+C\\.?\\s*Borcherding\\b|",
    "\\bNicholas\\s+Borcherding\\b|",
    "\\bN\\.?\\s*C\\.?\\s*Borcherding\\b|",
    "\\bBorcherding,\\s*N(?:\\.?\\s*C\\.?)?\\b|",
    "\\bBorcherding,\\s*N\\b"
  )

  # Use \\0 for entire match replacement (Pandoc will render ** ** as bold)
  gsub(me_rx, "**\\0**", x, perl = TRUE)
}
```

# Contact
```{r}
# helpers (if not already defined above)
`%||%` <- function(x, y) if (is.null(x)) y else x
safe_chr <- function(x) {
  if (is.null(x)) return("")
  if (is.list(x)) return(paste(vapply(x, safe_chr, ""), collapse = ", "))
  if (is.function(x) || is.language(x) || is.symbol(x) || is.expression(x)) return("")
  val <- tryCatch(as.character(x), error = function(e) "")
  if (length(val)) val[[1]] else ""
}

name  <- safe_chr(cv$name)
email <- safe_chr(cv$contact$email)
site  <- safe_chr(cv$website %||% cv$contact$website)
phone <- safe_chr(cv$phone   %||% cv$contact$phone)
addr  <- safe_chr(cv$address %||% cv$contact$address)

name_line <- paste0("**", name, "**")

contact_parts <- c(
email %||% "",
site %||% "",
phone%||% ""
)
contact_line <- paste(Filter(nzchar, contact_parts), collapse = " · ")

addr_line <- as.character(addr %||% "")

cat(
paste(
Filter(nzchar, c(name_line, "", contact_line, addr_line)),
collapse = "\n"
),
"\n\n",
sep = ""
)
```

## Positions
```{r}
pos <- cv$positions %||% list()
if (length(pos)) {
  cat(map_chr(pos, ~ glue("- **{.x$title}**, {.x$org} ({fmt_range(.x$start, .x$end)}) — {.x$location}")), sep = "\n")
} else {
  cat("_(none listed)_")
}
```

## Education & Training
```{r}
edu <- cv$education %||% list()
trn <- cv$training %||% list()

if (length(edu)) {
cat("Education\n\n")
cat(purrr::map_chr(edu, ~ glue::glue("- {.x$degree}, {.x$org}, {.x$year}")), sep = "\n")
} else {
cat("Education not listed\n")
}

cat("\n\n")

if (length(trn)) {
cat("Postgraduate Training\n\n")
cat(purrr::map_chr(trn, ~ glue::glue("- {.x$title}, {.x$org} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
} else {
cat("Training not listed")
}
```

## Professional Licensure
```{r}
lic <- cv$licensures %||% list()
if (length(lic)) {
  cat(map_chr(lic, ~ glue("- {nz(.x$year_start)}: {nz(.x$license)}{ifelse(!is.null(.x$state), glue(', {.x$state}'), '')}{ifelse(!is.null(.x$number), glue(', #{.x$number}'), '')}{ifelse(!is.null(.x$status), glue(' ({.x$status})'), '')}")), sep = "\n")
} else cat("_(none listed)_")
```

## Military Experience
```{r}
mil <- cv$military %||% list()
if (length(mil)) {
  cat(map_chr(mil, ~ glue("- {.x$branch}, {.x$rank} ({fmt_range(.x$start, .x$end)}), {.x$status}")), sep = "\n")
} else cat("_(none listed)_")
```

## Consulting & Advisory
```{r}
con <- cv$consulting %||% list()
if (length(con)) {
  cat(map_chr(con, ~ glue("- **{.x$role}**, {.x$org} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
} else cat("_(none listed)_")
```

## Editorial & Peer Review
```{r}
ed <- cv$editorial %||% list()

if (!is.null(ed$review_board) && length(ed$review_board)) {
  cat("**Editorial/Review Boards**\n")
  cat(map_chr(ed$review_board, ~ glue("- {.x$journal}{ifelse(!is.null(.x$year), glue(' ({.x$year})'), '')}")), sep = "\n")
  cat("\n\n")
}

if (!is.null(ed$guest_editor) && length(ed$guest_editor)) {
  cat("**Guest Editor**\n")
  cat(map_chr(ed$guest_editor, ~ glue("- {.x$journal}{ifelse(!is.null(.x$year), glue(' ({.x$year})'), '')}")), sep = "\n")
  cat("\n\n")
}

ahr <- ed$ad_hoc_reviews %||% list()
if (length(ahr)) {
  items <- map_chr(ahr, function(x) if (is.character(x)) glue("- {x}") else glue("- {x$journal}{ifelse(!is.null(x$year), glue(' ({x$year})'), '')}"))
  cat("**Ad Hoc Reviews**\n")
  cat(items, sep = "\n")
} else cat("_No ad hoc reviews listed_")
```

## Service & Committees
```{r}
srv <- cv$service %||% list()

if (!is.null(srv$institutional) && length(srv$institutional)) {
cat("Institutional\n\n")
cat(purrr::map_chr(srv$institutional, ~ glue::glue("- {.x$committee} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
cat("\n\n")
}

if (!is.null(srv$national) && length(srv$national)) {
cat("National\n\n")
cat(purrr::map_chr(srv$national, ~ glue::glue("- {.x$committee} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
} else if (is.null(srv$institutional) || !length(srv$institutional)) {
cat("(none listed)")
}
```

## Mentorship
```{r}
mnt <- cv$mentorship %||% list()

if (!is.null(mnt$research) && length(mnt$research)) {
cat("Research Mentorship\n\n")
cat(purrr::map_chr(mnt$research, ~ glue::glue("- {.x$mentee}, {.x$level}, {fmt_range(.x$start, 'Present')}: {.x$topic}")), sep = "\n")
cat("\n\n")
}

if (!is.null(mnt$career) && length(mnt$career)) {
cat("Career Development\n\n")
cat(purrr::map_chr(mnt$career, ~ glue::glue("- {.x$mentee}, {.x$level}, {fmt_range(.x$start, 'Present')}: {.x$topic}")), sep = "\n")
} else if (is.null(mnt$research) || !length(mnt$research)) {
cat("(none listed)")
}
```

## Awards & Honors
```{r}
awd <- cv$awards %||% list()
if (length(awd)) {
  cat(map_chr(awd, ~ glue("- {.x$year}: **{.x$name}**")), sep = "\n")
} else cat("_(none listed)_")
```

## Professional Memberships
```{r}
mbr <- cv$memberships %||% list()
if (length(mbr)) {
  cat(map_chr(mbr, ~ glue("- {.x$org} ({fmt_range(.x$start, .x$end)})")), sep = "\n")
} else cat("_(none listed)_")
```

## Software
```{r}
sft <- cv$software %||% list()
if (length(sft)) {
  cat(map_chr(sft, ~ glue("- **[{.x$name}]({.x$link})** ({.x$year}) — {.x$role}. {.x$description}")), sep = "\n")
} else cat("_(none listed)_")
```

## Research Funding
**Institutional**
```{r}
rf <- cv$research_funding %||% list()
inst <- rf$institutional %||% list()
if (length(inst)) {
  cat(map_chr(inst, ~ glue("- {.x$years}: *{.x$title}* — {.x$sponsor}. Role: **{.x$role}**")), sep = "\n")
} else cat("_(none listed)_")
```

**National**
```{r}
nat <- rf$national %||% list()
if (length(nat)) {
  cat(map_chr(nat, ~ glue("- {.x$years}: *{.x$title}* — {.x$sponsor}. Role: **{.x$role}**")), sep = "\n")
} else cat("_(none listed)_")
```

## Invited Presentations
**Institutional**
```{r}
pres <- cv$presentations %||% list()
ipi <- pres$invited$institutional %||% list()
if (length(ipi)) {
  cat(map_chr(ipi, ~ glue("- {.x$year}: *{.x$title}*. {.x$venue}")), sep = "\n")
} else cat("_(none listed)_")
```

**National**
```{r}
ipn <- pres$invited$national %||% list()
if (length(ipn)) {
  cat(map_chr(ipn, ~ glue("- {.x$year}: *{.x$title}*. {.x$venue}")), sep = "\n")
} else cat("_(none listed)_")
```

## Conference Abstracts
```{r}
abs <- pres$abstracts %||% list()
if (length(abs)) {
  cat(map_chr(abs, ~ glue("- {.x$year}: {embolden_me(.x$authors)}. *{.x$title}*. {.x$venue}")), sep = "\n")
} else cat("_(none listed)_")
```

## Publications
```{r}
# Show all items from the .bib and render them at the #refs div
if (!is.null(cv$selected_publications_bib) && file.exists(cv$selected_publications_bib)) {
  knitr::knit_meta_add(list(
    bibliography = cv$selected_publications_bib,
    nocite       = "@*"         
  ))
  cat("\n\n::: {#refs}\n:::\n\n")
} else {
  cat("_(bibliography file not found — set `selected_publications_bib` in cv.yaml and ensure the path exists)_\n")
}
```
